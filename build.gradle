plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
    id 'org.sinytra.wiki.toolkit' version '0.1.10'
    id 'me.modmuss50.mod-publish-plugin' version'0.7.4'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    // JEI
    maven {
        url 'https://maven.blamejared.com'
        content {
            includeGroup "mezz.jei"
        }
    }
    // Mod Wiki/Asset Export
    maven {
        url 'https://maven.sinytra.org/'
    }
    // Jade
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    runtimeOnly("org.sinytra:item-asset-export-neoforge:1.0.2+1.21")

    implementation "curse.maven:jade-324717:${jade_id}"

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

wiki {
    docs {
        instrumentus {
            root = file('docs/instrumentus')
            exportedAssetNamespaces = ['instrumentus']
        }
    }
}

publishMods {
    file = jar.archiveFile
    version = project.version
    changelog = providers.fileContents {
        file(providers.gradleProperty("INSTRUMENTUS_CHANGELOG"))
    }.getAsText()
    type = STABLE
    displayName = file.map {it.asFile.name}
    modLoaders.add("neoforge")
    dryRun = true

    curseforge {

        announcementTitle = "CurseForge Download"
        accessToken = providers.gradleProperty("CURSEFORGE_API_KEY")
        projectId = "231242"
        minecraftVersionRange {
            start = "1.21"
            end = "1.21.1"
        }

        javaVersions.add(JavaVersion.VERSION_21)

        clientRequired = true
        serverRequired = true

        projectSlug = "instrumentus"
    }

    modrinth {

        announcementTitle = "Modrinth Download"
        accessToken = providers.gradleProperty("MODRINTH_PAT")
        projectId = "ZSHoSQwH"
        minecraftVersionRange {
            start = "1.21"
            end = "1.21.1"
        }
    }

    discord {

        webhookUrl = providers.gradleProperty("DISCORD_WEBHOOK_INSTRUMENTUS")
        dryRunWebhookUrl = providers.gradleProperty("DISCORD_TEST")

        username = "Instrumentus Releases"

        content = changelog.map { "# Instrumentus Has been Updated! \n<@&1289306018840449065> \n" + it }

        setPlatforms(publishMods.platforms.curseforge, publishMods.platforms.modrinth)
    }
}